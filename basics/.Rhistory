?rnorm
rnorm(n = 100)
ndred points and plot in a histogram
random_points = rnorm(n=100, mean = 0, sd = 1)
histogram = hist(random_points)
histogram
m to generate a hundred points and plot in a histogram
random_points = rnorm(n=100, mean = 0, sd = 1)
histogram_100 = hist(random_points)
view(histogram_100)
show(histogram_100)
histogram_100
# R Practice Sheet for statistics without the BS
# Using R norm to generate a hundred points and plot in a histogram
random_points = rnorm(n=100, mean = 0, sd = 1)
histogram_100 = hist(random_points)
# R Practice Sheet for statistics without the BS
# Using R norm to generate a hundred points and plot in a histogram
random_points = rnorm(n=100, mean = 0, sd = 1)
histogram_100 = hist(random_points)
random_points_500 = rnorm(n=500, mean = 0, sd = 1)
histogram_500 = hist(random_points_500)
random_points_1000 = rnorm(n = 1000, mean = 0, sd = 1)
histogram_1000 = hist(random_points_1000)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000, main = "Histogram of 10000 Random points from a Normal Distribution of mean 1 and sd 1")
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000, main = "Histogram of 10000 random samples from a Normal Distribution of Mean 1 and Standard Deviation 1")
histogram_10000 = hist(random_points_10000, main = "Histogram of 10000 random samples from a Normal Distribution of Mean 1 \n and Standard Deviation 1")
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency")
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green")
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 1)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green")
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green")
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 1)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 5)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 2)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 0.5)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 \n and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 0)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 0)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 2)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 3)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 2)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 3)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 1)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value",
ylab = "Frequency",
border = "blue",
col = "green",
las = 1,
prob = TRUE)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob = TRUE) # in frequency or probability
# R Practice Sheet for statistics without the BS
# Using R norm to generate a hundred points and plot in a histogram
random_points = rnorm(n=100, mean = 0, sd = 1)
histogram_100 = hist(random_points)
random_points_500 = rnorm(n=500, mean = 0, sd = 1)
histogram_500 = hist(random_points_500)
random_points_1000 = rnorm(n = 1000, mean = 0, sd = 1)
histogram_1000 = hist(random_points_1000)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob = TRUE) # in frequency or probability
histogram_10000 = hist(random_points_10000, main = "Histogram of 10000 random samples from a Normal Distribution of Mean 1 \n and Standard Deviation 1")
?dnorm
dnorm(x = random_points_10000), mean = 0, sd = 1, log=FALSE)
dnorm(x = random_points_10000), mean = 0, sd = 1, log=FALSE)
dnorm(x = random_points_10000, mean = 0, sd = 1, log=FALSE)
dnorm(1)
dnorm(2)
dnorm(3)
dnorm(1)
dnorm(1)
dnorm(1)
dnorm(1)
dnorm(1)
dnorm(1)
dnorm(1)
dnorm(1)
dnorm(1)
dnorm(1)
seq(-4, 4, 0.01)
x <- seq(-4, 4, 0.01)
hist(data.4, prob=TRUE)
curve(dnorm(x, mean=0, sd=1),add=TRUE)
data.4<-rnorm(10000,mean=0,sd=1)
hist(data.4)
x <- seq(-4, 4, 0.01)
hist(data.4, prob=TRUE)
curve(dnorm(x, mean=0, sd=1),add=TRUE)
data.4<-rnorm(10000,mean=0,sd=1)
hist(data.4)
x <- seq(-4, 4, 0.01)
hist(data.4, prob=TRUE)
curve(dnorm(x, mean=0, sd=1),add=TRUE)
?curve
x <- seq(-4, 4, 0.01)
hist(data.4, prob=TRUE)
(dnorm(x, mean=0, sd=1)
)
x <- seq(-4, 4, 0.01)
hist(data.4, prob=TRUE)
curve(dnorm(x, mean=0, sd=1),add=TRUE)
?pnorm
histogram_cum_sum = histogram_10000
histogram_cum_sum$counts
?cumsum
cumsum(histogram_cum_sum$counts)
histogram_cum_sum$counts = cumsum(histogram_cum_sum$counts)
plot(hist.cum.sum)
plot(histogram_cum_sum)
curve(pnorm(x, mean=0, sd=1),add=TRUE) # pnorm the previous x sequence
curve(pnorm(x, mean=0, sd=1),add=TRUE) # pnorm the previous x sequence
curve(pnorm(x, mean=0, sd=1),add=TRUE) # pnorm the previous x sequence
curve(pnorm(x, mean=0, sd=1),add=TRUE) # pnorm the previous x sequence
curve(pnorm(x, mean=0, sd=1),add=TRUE) # pnorm the previous x sequence
curve(pnorm(x, mean=0, sd=1),add=TRUE) # pnorm the previous x sequence
curve(pnorm(x, mean=0, sd=1),add=TRUE) # pnorm the previous x sequence
pnorm(x, mean=0, sd=1),add=TRUE
pnorm(x, mean=0, sd=1)
histogram_cum_sum = hist(random_points_10000,
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob = TRUE) # in frequency or probability
histogram_cum_sum = hist(random_points_10000,
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob = TRUE) # in frequency or probability
histogram_cum_sum$counts = cumsum(histogram_cum_sum$counts) # adjust the list of counts in each bin to be the cumulative sum
plot(histogram_cum_sum) # plot the adjusted histogram after counts adjustment to get cumulative histogram
plot(histogram_cum_sum, prob = TRUE) # plot the adjusted histogram after counts adjustment to get cumulative histogram
?plot
histogram_cum_sum
plot(x = histogram_cum_sum$breaks, y=histogram_cum_sum$density) # plot the
plot(x = histogram_cum_sum$mids, y=histogram_cum_sum$density)
curve(pnorm(x, mean=0, sd=1),add=TRUE) # pnorm the previous x sequence
plot(histogram_cum_sum)
curve(pnorm(x, mean=0, sd=1)) # pnorm the previous x sequence
curve(pnorm(x, mean=0, sd=1), add = TRUE) # pnorm the previous x sequence
plot(histogram_cum_sum) # plot the adjusted histogram after counts adjustment to get cumulative histogram
curve(pnorm(x, mean=0, sd=1), add = TRUE) # pnorm the previous x sequence
# R Practice Sheet for statistics without the BS
library(graphics)
# Using R norm to generate a hundred points and plot in a histogram
random_points = rnorm(n=100, mean = 0, sd = 1)
histogram_100 = hist(random_points)
random_points_500 = rnorm(n=500, mean = 0, sd = 1)
histogram_500 = hist(random_points_500)
random_points_1000 = rnorm(n = 1000, mean = 0, sd = 1)
histogram_1000 = hist(random_points_1000)
random_points_10000 = rnorm(n=10000, mean = 0, sd = 1)
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob = TRUE) # in frequency or probability
# using dnorm to draw the density curve
x <- seq(-4, 4, 0.01)
hist(random_points_10000, prob=TRUE)
curve(dnorm(x, mean=0, sd=1),add=TRUE) # add the curve, dnorm sets the probability of the numbers in the sequence given mean 0 and sd 1
# using pnorm to see the cumulative sum
histogram_cum_sum = hist(random_points_10000,
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob = TRUE) # in frequency or probability
histogram_cum_sum$counts = cumsum(histogram_cum_sum$counts) # adjust the list of counts in each bin to be the cumulative sum
plot(histogram_cum_sum) # plot the adjusted histogram after counts adjustment to get cumulative histogram
curve(pnorm(x, mean=0, sd=1), add = TRUE) # pnorm the previous x sequence
histogram_10000 = hist(random_points_10000,
main = "Histogram of 10000 random samples from a Normal Distribution
of Mean 1 and Standard Deviation 1",
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob= FALSE) # in frequency or probability
histogram_10000
str(histogram_10000)
# using pnorm to see the cumulative sum
histogram_cum_sum = hist(random_points_10000,
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob = TRUE) # in frequency or probability
histogram_cum_sum$counts = cumsum(histogram_cum_sum$counts) # adjust the list of counts in each bin to be the cumulative sum
plot(histogram_cum_sum) # plot the adjusted histogram after counts adjustment to get cumulative histogram
curve(pnorm(x, mean=0, sd=1), add = TRUE) # pnorm the previous x sequence
histogram_cum_sum
str(histogram_cum_sum)
summary(histogram_cum_sum)
plot(histogram_cum_sum$mids[-1], histogram_cum_sum$density)
plot(histogram_cum_sum$mids[1:length(histogram_cum_sum)-1], histogram_cum_sum$density)
plot(histogram_cum_sum$mids[1:length(histogram_cum_sum)-1], histogram_cum_sum$density)
histogram_cum_sum$mids[1:length(histogram_cum_sum)-1]
plot(histogram_cum_sum$mids, histogram_cum_sum$density)
plot(histogram_cum_sum$counts, histogram_cum_sum$density)
# using pnorm to see the cumulative sum
histogram_cum_sum = hist(random_points_10000,
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob = TRUE) # in frequency or probability
histogram_cum_sum$counts = cumsum(histogram_cum_sum$counts) # adjust the list of counts in each bin to be the cumulative sum
plot(histogram_cum_sum) # plot the adjusted histogram after counts adjustment to get cumulative histogram
curve(pnorm(x, mean=0, sd=1), add = TRUE) # pnorm the previous x sequence
plot(histogram_cum_sum$mids, histogram_cum_sum$density)
# using pnorm to see the cumulative sum
histogram_cum_sum = hist(random_points_10000,
xlab = "Sample value", # x axis label
ylab = "Frequency", # y axis label
border = "blue", # border color of bins
col = "green", # color inside bins
las = 1, # axis label orientation
prob = TRUE) # in frequency or probability
histogram_cum_sum$counts = cumsum(histogram_cum_sum$counts) # adjust the list of counts in each bin to be the cumulative sum
plot(histogram_cum_sum) # plot the adjusted histogram after counts adjustment to get cumulative histogram
curve(pnorm(x, mean=0, sd=1), add = TRUE) # pnorm the previous x sequence
#Exponential
interval.exp<-seq(0, 10, 0.01)
plot(interval.exp,dexp(interval.exp,rate=0.5))
lines(interval.exp,dexp(interval.exp,rate=1),col="red")
lines(interval.exp,dexp(interval.exp,rate=2),col="blue")
lines(interval.exp,dexp(interval.exp,rate=10),col="green")
#Gamma
interval.gamma<-seq(0, 20, 0.01)
plot(interval.gamma,dgamma(interval.gamma,shape=1,scale=2))
lines(interval.gamma,dgamma(interval.gamma,shape=2,scale=2),col="red")
lines(interval.gamma,dgamma(interval.gamma,shape=5,scale=2),col="blue")
lines(interval.gamma,dgamma(interval.gamma,shape=5,scale=0.5),col="green")
#Student
interval.t<-seq(-10,10, 0.01)
plot(interval.t,dt(interval.t,10))
lines(interval.t,dt(interval.t,5),col="red")
lines(interval.t,dt(interval.t,2),col="blue")
lines(interval.t,dt(interval.t,1),col="green")
# simple empirical plots of the cumulative distributions (ECDF)
#Exponential
interval.exp<-seq(0, 10, 0.01)
plot(interval.exp,pexp(interval.exp,rate=0.5))
lines(interval.exp,pexp(interval.exp,rate=1),col="red")
lines(interval.exp,pexp(interval.exp,rate=2),col="blue")
lines(interval.exp,pexp(interval.exp,rate=10),col="green")
## Simple empirical plots of the cumulative distributions (ECDF)
#Exponential
interval.exp<-seq(0, 10, 0.01)
plot(interval.exp,pexp(interval.exp,rate=0.5))
lines(interval.exp,pexp(interval.exp,rate=1),col="red")
lines(interval.exp,pexp(interval.exp,rate=2),col="blue")
lines(interval.exp,pexp(interval.exp,rate=10),col="green")
pexp(interval.exp,rate=1)
?dexp
df = read.csv2(file = "Norm.t.data_.csv")
getwd()
setwd(~/workspace/grusData/basics)
setwd("~/workspace/grusData/basics")
setwd("~/workspace/grusData/basics")
df = read.csv2(file = "Norm.t.data_.csv")
View(df)
setwd("~/workspace/grusData/basics")
df = read.csv2(file = "Norm.t.data_.csv", header = TRUE)
View(df)
setwd("~/workspace/grusData/basics")
df = read.csv2(file = "Norm.t.data_.csv", header = TRUE,sep = ",")
View(df)
hist(df$Process1)
df$Process1
str(df$Process1)
SUMMARY(df$Process1)
sumamry(df$Process1)
summary(df$Process1)
df$Process1 = as.Numeric(df$Process1)
df$Process2 = as.Numeric(df$Process2)
hist(df$Process1)
df = read.csv2(file = "Norm.t.data_.csv", header = TRUE,sep = ",")
df$Process1 = as.numeric(df$Process1)
df$Process2 = as.numeric(df$Process2)
hist(df$Process1)
df = read.csv2(file = "Norm.t.data_.csv", header = TRUE,sep = ",")
hist(df[,1])
hist(df[,1])
setwd("~/workspace/grusData/basics")
df = read.csv2(file = "Norm.t.data_.csv", header = TRUE,sep = ",")
hist(df[,1])
df = read.csv2(file = "Norm.t.data_.csv", header = TRUE,sep = ",")
df$Process1 = as.numeric(df$Process1)
df$Process2 = as.numeric(df$Process2)
hist(df[,1])
hist(df$Process1)
df$Process1
## Working with a tiny dataset
setwd("~/workspace/grusData/basics")
df = read.csv2(file = "Norm.t.data_.csv", header = TRUE,sep = ",", dec = ".")
df$Process1 = as.numeric(df$Process1)
df$Process2 = as.numeric(df$Process2)
hist(df$Process1)
# draw histograms of both
hist(df$Process1)
hist(df$Process2)
ecdf_process1 = hist(df$Process1)
ecdf_process1$counts = cumsum(ecdf_process1$counts)
# draw ecdfs of both
ecdf_process1 = hist(df$Process1)
ecdf_process1$counts = cumsum(ecdf_process1$counts)
plot(ecdf_process1)
# draw ecdfs of both
ecdf_process1 = hist(df$Process1)
ecdf_process1$counts = cumsum(ecdf_process1$counts)
plot(ecdf_process1)
ecdf_process2 = hist(df$Process2)
ecdf_process2$counts = cumsum(ecdf_process1$counts)
plot(ecdf_process2)
ecdf_process2 = hist(df$Process2)
ecdf_process2$counts = cumsum(ecdf_process2$counts)
plot(ecdf_process2)
plot(ecdf_process1)
plot them both
plot(ecdf(df[,1]),col="red")
plot(ecdf(df[,2]),col="blue",add=TRUE)
?ecdf
# plot them both
plot(ecdf(df$Process1),col="red")
plot(ecdf(df$Process2),col="blue",add=TRUE)
ks.test(df$Process1,df$por)
ks.test(df$Process1,df$Process2)
# so we can look at the KS or Kolmagarov Smirnov test which computes the probaility of it being the same
ks.test(df$Process1,df$Process2)
